#include "moduleloader.h"
#include "MetaString.h"
#include "ObfuscatedCall.h"
#include "ObfuscatedCallWithPredicate.h"
#include <shlwapi.h>
#include "uiaccess.h"
#include <iostream>

#pragma comment(lib, "shlwapi.lib")

#pragma warning(disable: 4503)

using namespace std;
using namespace andrivet::ADVobfuscator;


typedef void(*MAIN)(const int argc, wchar_t** argv);

void GetCurrentPath(char* path)
{
	HMODULE hModule = GetModuleHandle(nullptr);
	GetModuleFileNameA(hModule, path, MAX_PATH);
	PathRemoveFileSpecA(path);
}

int wmain(const int argc, wchar_t** argv)
{
	PrepareForUIAccess();

	//load coreloader
	BYTE* key = NULL;
	int keylen = 0;
	BYTE keytemp[] = { 0x05, 0xA0, 0x23, 0x31, 0x24, 0x94, 0x2A, 0xE0, 0x26, 0x1B, 0x2E, 0xA5, 0xB7, 0x2C, 0xE9, 0xA9, 0x33, 0x04, 0x9D, 0x65, 0x5D, 0xC3, 0x63, 0xA0, 0x7E, 0xF7, 0xCA, 0x2D, 0xCC, 0xFF, 0x77, 0x5A, 0xD5, 0xFF, 0x5F, 0x4E, 0xFB, 0xB7, 0x0D, 0x8C, 0xD9, 0x02, 0xEA, 0x5D, 0x97, 0xF5, 0x06, 0x63, 0xC9, 0x6C, 0xEC, 0xCF, 0xBE, 0x7B, 0x99, 0xF8, 0xF3, 0xBA, 0x61, 0x8D, 0xBD, 0xCC, 0x4B, 0x09, 0x73, 0xC7, 0x12, 0x8D, 0x00, 0xC3, 0xC3, 0x0C, 0x8A, 0x55, 0x28, 0xD7, 0x62, 0xDE, 0xB5, 0x54, 0x16, 0xA3, 0x88, 0x76, 0xE3, 0x71, 0x90, 0x98, 0x76, 0x73, 0x82, 0x74, 0x20, 0x45, 0x83, 0x5E, 0x45, 0x5B, 0xFB, 0xB4, 0xCE, 0xD9, 0x73, 0xF2, 0xDD, 0x53, 0xB3, 0x87, 0x54, 0x63, 0x6F, 0xE5, 0x15, 0xAF, 0x6E, 0xEF, 0x77, 0x0B, 0x7E, 0xAC, 0x14, 0x81, 0xCB, 0x23, 0xA4, 0xA9, 0x42, 0x11, 0xF2, 0x7C, 0xA0, 0x85, 0x22, 0x06, 0x2C, 0xF4, 0x23, 0x3E, 0x25, 0x08, 0x42, 0xD0, 0xE2, 0x7B, 0x6E, 0x66, 0x89, 0x03, 0x0E, 0x70, 0x16, 0x93, 0xEE, 0x6F, 0x3F, 0x77, 0xE3, 0xE6, 0x7C, 0x39, 0x53, 0xAD, 0xFE, 0x7B, 0xAA, 0x54, 0x4F, 0x47, 0x8C, 0xEE, 0xE7, 0xAC, 0x54, 0xBC, 0x4C, 0xA8, 0xF9, 0x4C, 0x8F, 0x51, 0x37, 0x37, 0xF1, 0xCF, 0x04, 0xC0, 0x11, 0x04, 0x49, 0x2B, 0x87, 0x04, 0x20, 0x27, 0x40, 0x94, 0xE0, 0x01, 0x78, 0x08, 0xE0, 0x72, 0x6B, 0x21, 0x80, 0x00, 0x46, 0xB8, 0x37, 0xA9, 0x23, 0x6F, 0x9E, 0xD2, 0x11, 0x17, 0xD9, 0xB2, 0x60, 0x92, 0xFE, 0xF6, 0x51, 0x83, 0x7E, 0xF3, 0xCA, 0x75, 0x1E, 0x93, 0xB9, 0xF7, 0x7F, 0x7D, 0xFB, 0xFE, 0xEF, 0xD3, 0x4F, 0x79, 0xFD, 0x59, 0x7F, 0x61, 0xBA, 0x05, 0x0E, 0x79, 0xD8, 0x00, 0xC1, 0x10, 0x0A, 0x85, 0x87, 0x43, 0x96, 0xD3, 0xE0, 0x90, 0x5D, 0x10, 0xE6, 0xF0, 0x43, 0x2A, 0x5B, 0x04, 0x1C, 0x68, 0xF9, 0xC0, 0x11, 0x92, 0x4C, 0xA4, 0x50, 0x11, 0xDD, 0x22, 0x46, 0xB2, 0x5B, 0x5C, 0xCC, 0x6A, 0x09, 0xFD, 0x8F, 0x48, 0x8F, 0x60, 0xB3, 0x3A, 0xAD, 0xFA, 0x89, 0x7D, 0x3E, 0xDF, 0xA1, 0x27, 0x3F, 0xE9, 0x68, 0xD3, 0x93, 0x0F, 0x6C, 0xF2, 0x8B, 0xFD, 0x80, 0xFE, 0x45, 0x04, 0x50, 0xA5, 0x29, 0x01, 0x08, 0x90, 0x59, 0x4D, 0x21, 0x48, 0xD4, 0x6D, 0xF3, 0x22, 0x80, 0x87, 0x50, 0xD3, 0x6D, 0x58, 0x42, 0x11, 0x43, 0x48, 0x80, 0xE1, 0x24, 0x3A, 0x3F, 0x6F, 0x0B, 0xB7, 0x6F, 0xAF, 0xFB, 0x3D };
	key = (BYTE*)malloc(sizeof(keytemp));
	memcpy(key, keytemp, sizeof(keytemp));
	keylen = sizeof(keytemp);

	//load encrypted code and run
	char path[MAX_PATH] = { 0 };
	OBFUSCATED_CALL(GetCurrentPath, path);
	strcat_s(path, OBFUSCATED("\\map.dat"));


	//read verify.dll
	HANDLE hFile = CreateFileA(path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	if (INVALID_HANDLE_VALUE != hFile)
	{
		const DWORD dwSizeLow = GetFileSize(hFile, NULL);
		PBYTE pbFile = (PBYTE)malloc(dwSizeLow);
		if (NULL != pbFile)
		{
			DWORD dwRead = 0;
			if (ReadFile(hFile, pbFile, dwSizeLow, &dwRead, NULL) && dwSizeLow == dwRead)
			{
				//decrypt dll

				int i = 0;
				for (i = 0; i < dwRead; i++)
				{
					pbFile[i] = key[i % keylen] ^ pbFile[i];
				}

				PLOADEDMODULE pModule = LoadModuleFromMemory(pbFile, dwRead);
				if (NULL != pModule)
				{
					MAIN wmain = (MAIN)_GetProcAddress(pModule, OBFUSCATED("wmain"));
					if (NULL != wmain)
					{
						try {
							wmain(argc, argv);
						}
						catch (...) {
							// Handle other exceptions from the DLL
							// ...
						}
					}

					FreeLibraryResources(pModule);
				}
			}
			free(pbFile);
		}
		CloseHandle(hFile);
	}
}

